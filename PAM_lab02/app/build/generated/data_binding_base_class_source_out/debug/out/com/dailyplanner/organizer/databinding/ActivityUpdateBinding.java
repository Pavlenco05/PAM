// Generated by view binder compiler. Do not edit!
package com.dailyplanner.organizer.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.Toolbar;
import androidx.coordinatorlayout.widget.CoordinatorLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.dailyplanner.organizer.R;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.switchmaterial.SwitchMaterial;
import com.google.android.material.textfield.TextInputEditText;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityUpdateBinding implements ViewBinding {
  @NonNull
  private final CoordinatorLayout rootView;

  @NonNull
  public final MaterialButton btnCancel;

  @NonNull
  public final MaterialButton btnDeleteEvent;

  @NonNull
  public final MaterialButton btnSelectDate;

  @NonNull
  public final MaterialButton btnSelectTime;

  @NonNull
  public final MaterialButton btnUpdateEvent;

  @NonNull
  public final TextInputEditText editTextDescription;

  @NonNull
  public final TextInputEditText editTextTitle;

  @NonNull
  public final SwitchMaterial switchCompleted;

  @NonNull
  public final TextView textSelectedDateTime;

  @NonNull
  public final Toolbar toolbar;

  private ActivityUpdateBinding(@NonNull CoordinatorLayout rootView,
      @NonNull MaterialButton btnCancel, @NonNull MaterialButton btnDeleteEvent,
      @NonNull MaterialButton btnSelectDate, @NonNull MaterialButton btnSelectTime,
      @NonNull MaterialButton btnUpdateEvent, @NonNull TextInputEditText editTextDescription,
      @NonNull TextInputEditText editTextTitle, @NonNull SwitchMaterial switchCompleted,
      @NonNull TextView textSelectedDateTime, @NonNull Toolbar toolbar) {
    this.rootView = rootView;
    this.btnCancel = btnCancel;
    this.btnDeleteEvent = btnDeleteEvent;
    this.btnSelectDate = btnSelectDate;
    this.btnSelectTime = btnSelectTime;
    this.btnUpdateEvent = btnUpdateEvent;
    this.editTextDescription = editTextDescription;
    this.editTextTitle = editTextTitle;
    this.switchCompleted = switchCompleted;
    this.textSelectedDateTime = textSelectedDateTime;
    this.toolbar = toolbar;
  }

  @Override
  @NonNull
  public CoordinatorLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityUpdateBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityUpdateBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_update, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityUpdateBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btnCancel;
      MaterialButton btnCancel = ViewBindings.findChildViewById(rootView, id);
      if (btnCancel == null) {
        break missingId;
      }

      id = R.id.btnDeleteEvent;
      MaterialButton btnDeleteEvent = ViewBindings.findChildViewById(rootView, id);
      if (btnDeleteEvent == null) {
        break missingId;
      }

      id = R.id.btnSelectDate;
      MaterialButton btnSelectDate = ViewBindings.findChildViewById(rootView, id);
      if (btnSelectDate == null) {
        break missingId;
      }

      id = R.id.btnSelectTime;
      MaterialButton btnSelectTime = ViewBindings.findChildViewById(rootView, id);
      if (btnSelectTime == null) {
        break missingId;
      }

      id = R.id.btnUpdateEvent;
      MaterialButton btnUpdateEvent = ViewBindings.findChildViewById(rootView, id);
      if (btnUpdateEvent == null) {
        break missingId;
      }

      id = R.id.editTextDescription;
      TextInputEditText editTextDescription = ViewBindings.findChildViewById(rootView, id);
      if (editTextDescription == null) {
        break missingId;
      }

      id = R.id.editTextTitle;
      TextInputEditText editTextTitle = ViewBindings.findChildViewById(rootView, id);
      if (editTextTitle == null) {
        break missingId;
      }

      id = R.id.switchCompleted;
      SwitchMaterial switchCompleted = ViewBindings.findChildViewById(rootView, id);
      if (switchCompleted == null) {
        break missingId;
      }

      id = R.id.textSelectedDateTime;
      TextView textSelectedDateTime = ViewBindings.findChildViewById(rootView, id);
      if (textSelectedDateTime == null) {
        break missingId;
      }

      id = R.id.toolbar;
      Toolbar toolbar = ViewBindings.findChildViewById(rootView, id);
      if (toolbar == null) {
        break missingId;
      }

      return new ActivityUpdateBinding((CoordinatorLayout) rootView, btnCancel, btnDeleteEvent,
          btnSelectDate, btnSelectTime, btnUpdateEvent, editTextDescription, editTextTitle,
          switchCompleted, textSelectedDateTime, toolbar);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
